// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package sqlc

import (
	"context"
	"time"
)

const createSession = `-- name: CreateSession :exec
INSERT INTO sessions (user_id, token, expires_at, refresh_token, refresh_expires_at)
VALUES (?, ?, ?, ?, ?)
`

type CreateSessionParams struct {
	UserID           int64     `json:"user_id"`
	Token            string    `json:"token"`
	ExpiresAt        time.Time `json:"expires_at"`
	RefreshToken     string    `json:"refresh_token"`
	RefreshExpiresAt time.Time `json:"refresh_expires_at"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) error {
	_, err := q.exec(ctx, q.createSessionStmt, createSession,
		arg.UserID,
		arg.Token,
		arg.ExpiresAt,
		arg.RefreshToken,
		arg.RefreshExpiresAt,
	)
	return err
}

const createUser = `-- name: CreateUser :one

INSERT INTO users (email, password_hash)
VALUES (?, ?)
RETURNING id, email, created_at
`

type CreateUserParams struct {
	Email        string `json:"email"`
	PasswordHash string `json:"password_hash"`
}

type CreateUserRow struct {
	ID        int64     `json:"id"`
	Email     string    `json:"email"`
	CreatedAt time.Time `json:"created_at"`
}

// user/query.sql
// ------------------------------------------------------------
// Users basic queries for sqlc (SQLite engine)
// Schema: id INTEGER PK, email TEXT UNIQUE, password_hash TEXT, created_at DATETIME
// ------------------------------------------------------------
// Create a new user and return the generated row --------------------------------
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.queryRow(ctx, q.createUserStmt, createUser, arg.Email, arg.PasswordHash)
	var i CreateUserRow
	err := row.Scan(&i.ID, &i.Email, &i.CreatedAt)
	return i, err
}

const deleteSessionByRefreshToken = `-- name: DeleteSessionByRefreshToken :exec
DELETE FROM sessions
WHERE refresh_token = ?
`

func (q *Queries) DeleteSessionByRefreshToken(ctx context.Context, refreshToken string) error {
	_, err := q.exec(ctx, q.deleteSessionByRefreshTokenStmt, deleteSessionByRefreshToken, refreshToken)
	return err
}

const deleteSessionByToken = `-- name: DeleteSessionByToken :exec
DELETE FROM sessions
WHERE token = ?
`

func (q *Queries) DeleteSessionByToken(ctx context.Context, token string) error {
	_, err := q.exec(ctx, q.deleteSessionByTokenStmt, deleteSessionByToken, token)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE  id = ?
`

// Delete a user -----------------------------------------------------------------
func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteUserStmt, deleteUser, id)
	return err
}

const getSessionByRefreshToken = `-- name: GetSessionByRefreshToken :one
SELECT id, user_id, token, expires_at, refresh_token, refresh_expires_at, created_at FROM sessions
WHERE refresh_token = ? AND refresh_expires_at > CURRENT_TIMESTAMP
`

func (q *Queries) GetSessionByRefreshToken(ctx context.Context, refreshToken string) (Session, error) {
	row := q.queryRow(ctx, q.getSessionByRefreshTokenStmt, getSessionByRefreshToken, refreshToken)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.ExpiresAt,
		&i.RefreshToken,
		&i.RefreshExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password_hash, created_at
FROM   users
WHERE  email = ?
`

// Fetch a user by unique email ---------------------------------------------------
func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.queryRow(ctx, q.getUserByEmailStmt, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, email, password_hash, created_at
FROM   users
WHERE  id = ?
`

// Fetch a user by primary key ----------------------------------------------------
func (q *Queries) GetUserByID(ctx context.Context, id int64) (User, error) {
	row := q.queryRow(ctx, q.getUserByIDStmt, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
	)
	return i, err
}

const isValidSession = `-- name: IsValidSession :one
SELECT COUNT(*) FROM sessions
WHERE user_id = ? AND token = ? AND expires_at > CURRENT_TIMESTAMP
`

type IsValidSessionParams struct {
	UserID int64  `json:"user_id"`
	Token  string `json:"token"`
}

func (q *Queries) IsValidSession(ctx context.Context, arg IsValidSessionParams) (int64, error) {
	row := q.queryRow(ctx, q.isValidSessionStmt, isValidSession, arg.UserID, arg.Token)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, email, created_at
FROM   users
ORDER  BY id
LIMIT  ?  OFFSET ?
`

type ListUsersParams struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`
}

type ListUsersRow struct {
	ID        int64     `json:"id"`
	Email     string    `json:"email"`
	CreatedAt time.Time `json:"created_at"`
}

// List active users (simple pagination) -----------------------------------------
func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]ListUsersRow, error) {
	rows, err := q.query(ctx, q.listUsersStmt, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUsersRow
	for rows.Next() {
		var i ListUsersRow
		if err := rows.Scan(&i.ID, &i.Email, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePasswordHash = `-- name: UpdatePasswordHash :exec
UPDATE users
SET    password_hash = ?
WHERE  id = ?
`

type UpdatePasswordHashParams struct {
	PasswordHash string `json:"password_hash"`
	ID           int64  `json:"id"`
}

// Update only the password hash --------------------------------------------------
func (q *Queries) UpdatePasswordHash(ctx context.Context, arg UpdatePasswordHashParams) error {
	_, err := q.exec(ctx, q.updatePasswordHashStmt, updatePasswordHash, arg.PasswordHash, arg.ID)
	return err
}
